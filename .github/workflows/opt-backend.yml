#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Modified Backend
jobs:
  paths-filter:
    name: paths-filter
    runs-on: ubuntu-latest
    outputs:
      not-ignore: ${{ steps.filter.outputs.not-ignore }}
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-paths-filter.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/incubator-streampark/incubator-streampark', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |-
          not-ignore:
            - '!**/*.md'
    - run: touch optcd-4.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-paths-filter
        path: /home/runner/inotifywait-log-paths-filter.csv
  license-header:
    name: license-header
    runs-on: ubuntu-latest
    needs: paths-filter
    timeout-minutes: 10
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-license-header.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/incubator-streampark/incubator-streampark', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
      with:
        submodules: true
    - run: touch optcd-3.txt
    - name: Check license header
      uses: apache/skywalking-eyes/header@main
    - run: touch optcd-4.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-license-header
        path: /home/runner/inotifywait-log-license-header.csv
  code-style:
    name: code-style
    runs-on: ubuntu-latest
    needs: license-header
    timeout-minutes: 10
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-code-style.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/incubator-streampark/incubator-streampark', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
      with:
        submodules: true
    - run: touch optcd-3.txt
    - name: Check codestyle
      run: ./mvnw -B -q -nsu checkstyle:check spotless:check
    - run: touch optcd-4.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-code-style
        path: /home/runner/inotifywait-log-code-style.csv
  build:
    name: build (${{ matrix.java }})
    runs-on: ubuntu-latest
    needs: code-style
    strategy:
      fail-fast: false
      matrix:
        java:
        - 8
        - 11
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-build (${{ matrix.java }}).csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/incubator-streampark/incubator-streampark', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - name: Checkout
      uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - name: Set up java ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: adopt
    - run: touch optcd-4.txt
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-backend
        restore-keys: ${{ runner.os }}-maven-
    - run: touch optcd-5.txt
    - name: Backend Build with Maven
      run: ./mvnw -B clean install -Pshaded,webapp,dist -DskipTests
    - run: touch optcd-6.txt
    - name: Check dependency license
      run: tools/dependencies/check-LICENSE.sh
    - run: touch optcd-7.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-build (${{ matrix.java }})
        path: /home/runner/inotifywait-log-build (${{ matrix.java }}).csv
  result:
    name: result
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
    - paths-filter
    - build
    - license-header
    - code-style
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-result.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/incubator-streampark/incubator-streampark', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - name: Status
      run: |-
        if [[ ${{ needs.paths-filter.outputs.not-ignore }} == 'false' && ${{ github.event_name }} == 'pull_request' ]]; then
          echo "Skip Backend!"
          exit 0
        fi
        if [[ ${{ contains(needs.*.result, 'success') }} != 'true' ]]; then
          echo "Backend Build Failed!"
          exit -1
        fi
    - run: touch optcd-3.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-result
        path: /home/runner/inotifywait-log-result.csv
'on':
- push
- workflow_dispatch
